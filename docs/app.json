[{"name": "app.py", "content": "# --------------------------------------------\n# Imports at the top - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\nfrom shiny import reactive, render\nfrom shiny.express import ui\n\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\n\nfrom faicons import icon_svg\n\n\n# --------------------------------------------\n# Constants & Reactive Values\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 1\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n\n# --------------------------------------------\n# Simulated Live Data via Reactive Calc\n# --------------------------------------------\n\n@reactive.calc()\ndef reactive_calc_combined():\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    temp = round(random.uniform(-18, -16), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    deque_snapshot = reactive_value_wrapper.get()\n    df = pd.DataFrame(deque_snapshot)\n    latest_dictionary_entry = new_dictionary_entry\n\n    return deque_snapshot, df, latest_dictionary_entry\n\n\n# --------------------------------------------\n# UI Page Layout\n# --------------------------------------------\n\nui.page_opts(\n    title=\"Blessing's Live Dashboard\",\n    fillable=True\n)\n\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Live CI Monitor\", class_=\"text-center\")\n    ui.p(\n        \"Blessing's real-time demo: temperature readings in Antarctica.\",\n        class_=\"text-center\"\n    )\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\"GitHub Source\", href=\"https://github.com/teflxndxn/cintel-05-intel\", target=\"_blank\")\n    ui.a(\"GitHub App\", href=\"https://teflxndxn.github.io/cintel-05-intel/\", target=\"_blank\")\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n\n\n# --------------------------------------------\n# Main Layout: Value Box, Time, Data, Chart\n# --------------------------------------------\n\nwith ui.layout_columns():\n\n    with ui.value_box(\n        showcase=icon_svg(\"sun\"),\n        theme=\"bg-gradient-orange-yellow\",\n    ):\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            _, _, latest = reactive_calc_combined()\n            return f\"{latest['temp']} \u00b0C\"\n\n        \"warmer than usual\"\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Current Date and Time\")\n\n        @render.text\n        def display_time():\n            _, _, latest = reactive_calc_combined()\n            return latest['timestamp']\n\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Most Recent Readings\")\n\n        @render.data_frame\n        def display_df():\n            deque_snapshot, df, _ = reactive_calc_combined()\n            return df\n\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Temperature Chart with Trend Line\")\n\n        @render_plotly\n        def display_plot():\n            _, df, _ = reactive_calc_combined()\n\n            if not df.empty:\n                df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n                fig = px.scatter(\n                    df,\n                    x=\"timestamp\",\n                    y=\"temp\",\n                    title=\"Temperature Readings with Regression Line\",\n                    labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n                    color_discrete_sequence=[\"orange\"]\n                )\n\n                # Linear regression for trend line only if enough data points\n                if len(df) >= 3:\n                    x_vals = list(range(len(df)))\n                    y_vals = df[\"temp\"]\n\n                    slope, intercept, _, _, _ = stats.linregress(x_vals, y_vals)\n                    df['trend_line'] = [slope * x + intercept for x in x_vals]\n\n                    fig.add_scatter(\n                        x=df[\"timestamp\"],\n                        y=df['trend_line'],\n                        mode='lines',\n                        name='Trend Line',\n                        line=dict(color='yellow')\n                    )\n\n                fig.update_layout(\n                    xaxis_title=\"Time\",\n                    yaxis_title=\"Temperature (\u00b0C)\"\n                )\n\n                return fig\n\n            else:\n                return None\n", "type": "text"}]